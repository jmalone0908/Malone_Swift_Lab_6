Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
	John Malone
	Maura Swift

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	'git help' returns the most commonly used commands for git

    ```

2.  What does `-ag` cause `git help` to do?

    ```
	'-ag' returns all of the commands for git


    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```
	'git status' returns if your branch is up to date, if there is 	anything staged, or if your repository is ahead of the master.


    ```

2.  What does `git add names.txt` do?

    ```
	'git add names.txt' tells git to start tracking names.txt


    ```

3.  What does `git commit -m "Add our names."` do?

    ```
	`git commit -m "Add our names."` stages everything on the 	working tree.


    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	`git add .` starts tracking all files in the directory.


    ```

5.  What does `git commit` (without -m) do?

    ```
	`git commit` stages everything on the working tree and allows 	the user to write their own commit message.


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
	git commit


    ```

7.  What does `git log do`?

    ```
	`git log` shows all previous commits and their messages in 	reverse chronological order.


    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
	names.txt


    ```

    **Unstaged**

    ```
	movies.txt


    ```

    **Untracked**

    ```
	foods.txt


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
	names.txt


    ```

2.  What command do you run to stage changes?

    ```
	add


    ```

3.  What command do you run to unstage changes?

    ```
	reset


    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
	`git diff` displays differences between the working tree and the 	index.


    ```

2.  What does `git diff --cached` display?

    ```
	`git diff --cached` displays differences for staged files.


    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
	reset names.txt
	add movies.txt

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
	It appears under both the staged sections and the unstaged 	sections. This is because changes were made after it was staged.


    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
	It appears as deleted. git saw that it was successfully deleted.


    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	It shows that movies.txt was deleted and last-movies.txt is 	untracked. The named changed so git does not recognize it 	anymore.


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
	git add .
	git commit -m "We made da changes."

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
	Files that are ready to be pushed that have been changed.


    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
	Because you might not want to share all of your changes with 	others. Also, it creates less clutter.


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
	It pulled them from being commited back to the stage.


    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
	It resets to the last commit.


    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
	`--hard` resets the commit to the last commit and `--soft` 	undoes the last commit but keeps the changes.


    ```

3.  What do you think `HEAD` means?

    ```
	It is a symbolic reference to the branch you are working on.

    ```

4.  What do you think `HEAD^` means?

    ```
	It is how you regress to older versions.

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
